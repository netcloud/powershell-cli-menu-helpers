#Requires -Version 5.1
$ErrorActionPreference = 'Stop'

# Remove old build if available
if (Test-Path -Path '.\build') {
    Remove-Item -Path '.\build' -Recurse -Force
}

# Load the config.json
$Config = Get-Content -Path '.\config.json' | ConvertFrom-Json

# Create folder structure
New-Item -Path ('.\build\' + $Config.ModuleName) -ItemType Directory

# Get functions to export
[System.String[]]$FunctionsToExport = (Get-ChildItem -Path '.\functions').BaseName

# Create powershell module manifest
New-ModuleManifest -Path ('.\build\' + $Config.ModuleName + '\' + $Config.ModuleName + '.psd1') `
    -Guid $Config.GUID `
    -Author $Config.Author `
    -CompanyName $Config.CompanyName `
    -Copyright $Config.Copyright `
    -ModuleVersion $Config.ModuleVersion `
    -Description $Config.Description `
    -PowerShellVersion $Config.PowerShellVersion `
    -FunctionsToExport $FunctionsToExport `
    -ProjectUri $Config.ProjectUri `
    -LicenseUri $Config.LicenseUri `
    -ReleaseNotes $Config.ReleaseNotes `
    -RootModule "$($Config.ModuleName).psm1" `
    -Tags $Config.Tags `
    -IconUri $Config.IconUri

# Replace the "# Generated by: XY"
[System.String]$ModuleManifest = Get-Content -Path ('.\build\' + $Config.ModuleName + '\' + $Config.ModuleName + '.psd1') -Raw
$ModuleManifest = $ModuleManifest -replace '# Generated by: .*' , "# Generated by: $($Config.CompanyName)"
Set-Content -Path ('.\build\' + $Config.ModuleName + '\' + $Config.ModuleName + '.psd1') -Value $ModuleManifest

# Create the powershell module
foreach ($Funciton in (Get-ChildItem -Path '.\functions')) {
    Get-Content -Path $Funciton.FullName -Raw | Add-Content -Path ('.\build\' + $Config.ModuleName + '\' + $Config.ModuleName + '.psm1')
}